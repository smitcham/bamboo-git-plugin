repository.git.name = Git
repository.git.repositoryUrl = Repository URL
repository.git.repositoryUrl.description = The URL of Git repository.
repository.git.username = Username
repository.git.username.description = Username you want to use to authenticate with http(s) or SSH repository.
repository.git.password = Password
repository.git.password.description = Password you want to use to authenticate with http(s) or SSH repository.
repository.git.branch = Branch
repository.git.branch.description = The name of the branch (or tag) containing source code.
repository.git.ssh.key = SSH Key
repository.git.ssh.key.description = SSH private key you want to use to access the repository.
repository.git.ssh.key.change = Change SSH key?
repository.git.ssh.passphrase = SSH Passphrase
repository.git.ssh.passphrase.description = Passphrase you want to use to access SSH private key.
repository.git.useShallowClones = Use shallow clones
repository.git.useShallowClones.description = Fetches the shallowest commit history possible. Do not use if your build depends on full repository history.  
repository.git.useSubmodules = Use submodules
repository.git.useSubmodules.description = Enable submodules support if defined for repository. If native Git capability is not defined for agent submodules support would be disabled.
repository.git.maven.path = Location of POM file
repository.git.maven.path.description = Path to the POM file relative to the root of the Git repository<br />\
  (Default if empty: pom.xml in the root of the repository)

repository.git.description = Git support works best if the Git executable <a id={0} href={1}>capability</a> is defined for agents. \
  If not defined, Bamboo will use JGit, which currently does not support submodules.

repository.git.authenticationType = Authentication Type
repository.git.authenticationType.none = None
repository.git.authenticationType.password = Username/password
repository.git.authenticationType.ssh_keypair = SSH private key
repository.git.commandTimeout = Command timeout (minutes)
repository.git.commandTimeout.description = Specifies how many minutes are given for git commands to finish. Default is 180 (3 hours).
repository.git.verbose.logs = Verbose logs
repository.git.verbose.logs.description = Outputs more verbose logs from git commands.

repository.git.cacheDirectory = Cache directory
repository.git.cacheDirectory.cleanMessage = You can manually clean cache directory for this plan by clicking here:
repository.git.cacheDirectory.cleanTitle = delete this cache directory

repository.git.messages.cache.cleanFailedNoPlan = Failed to clean cache directory for plan ''{0}'': there is no such plan.
repository.git.messages.cache.notGit = Tried to clean Git cache for plan ''{0}'' which is not a Git repository.
repository.git.messages.cache.notExist = Cache directory for plan ''{0}'' does not exist: ''{1}''.
repository.git.messages.cache.cleaning = Cleaning cache directory for plan ''{0}'' : ''{1}''.
repository.git.messages.cache.cleanFailed = Could not delete cache directory for plan ''{0}''.
repository.git.messages.cacheIsNull = Cache directory is null, can't proceed with collecting changesets. Check bamboo logs for details.
repository.git.messages.ccRepositoryNeverChecked = Never checked remote repository, obtaining shallow revision {0}.
repository.git.messages.ccRecover.failedToCollectChangesets = Warning: failed to collect changesets in cache directory ''{0}'', trying to recover...
repository.git.messages.ccRecover.cleanedCacheDirectory = Cleaned cache directory ''{0}'', trying to fetch it again from scratch...
repository.git.messages.ccRecover.fetchedRemoteRepository = Fetched remote repository to cache directory ''{0}'', trying to extract changesets...
repository.git.messages.ccRecover.completed = Extracted changesets, recover successful.
repository.git.messages.ccRecover.failedToExtractChangesets = Failed to extract changesets, will return a stub changeset.
repository.git.messages.runtimeException = Runtime exception.
repository.git.messages.rsRecover.failedToFetchCache = Warning: failed to retrieve source code to cache directory ''{0}'', trying to recover...
repository.git.messages.rsRecover.failedToFetchWorkingDir =  Warning: failed to retrieve source code to working directory ''{0}'', trying to recover...
repository.git.messages.rsRecover.cleanedCacheDirectory = Cleaned cache directory ''{0}'', trying to fetch the code once again...
repository.git.messages.rsRecover.fetchingCacheCompleted = Fetching to cache directory ''{0}'' completed, proceeding with checkout...
repository.git.messages.rsRecover.failedToCheckout = Warning: failed to checkout source code to directory ''{0}'', trying to recover...
repository.git.messages.rsRecover.cleanedSourceDirectory = Cleaned source directory ''{0}''...
repository.git.messages.rsRecover.fetchingCompleted = Fetching to source directory ''{0}'' completed, proceeding with checkout...
repository.git.messages.rsRecover.checkoutCompleted = Checkout completed, recover successful.
repository.git.messages.protocolUnsupported = ''{0}'' is not supported protocol.
repository.git.messages.failedToCreateFileRepository = Failed to create FileRepository.
repository.git.messages.cannotDetermineRevision = Cannot determine current revision in source directory ''{0}'' due to IOException:
repository.git.messages.targetRevisionIsNull = Target revision is null, obtaining the latest one from ''{0}'' on branch ''{1}''.
repository.git.messages.cannotDetermineHead = Cannot determine head revision of ''{0}'' on branch ''{1}''. Branch has probably been removed.
repository.git.messages.creatingGitRepository = Creating local git repository in ''{0}''.
repository.git.messages.fetchingBranch = Fetching branch ''{0}'' from ''{1}''.
repository.git.messages.doingShallowFetch = Will try to do a shallow fetch.
repository.git.messages.fetchingFailed = Cannot fetch branch ''{1}'' from ''{0}'' to source directory ''{2}''.
repository.git.messages.checkingOutRevision = Checking out revision {0}.
repository.git.messages.checkoutFailed = Checkout to revision {0} has failed.
repository.git.messages.checkoutFailedMissingObject = Checkout to revision {0} has failed due to a missing object {1}. This might happen if \
  the repository contains submodules, as Bamboo currently does not support them. You can verify whether the repository contains submodules \
  by cloning the repository with an official Git client and checking if .gitmodules file exists in the top level directory of your repository clone.
repository.git.messages.extractingChangesetsException = Exception during extracting changes in ''{0}'', previousRevision is {1} targetRevision is {2}.
repository.git.messages.jgit.submodules.not.supported = Submodules handling requested but no native Git capability defined for agent. Please define native Git capability for agent to use submodules.
repository.git.messages.invalidURI = ''{0}'' is not valid URI.
repository.git.messages.failedToOpenTransport = Failed to open transport for ''{0}''.
repository.git.messages.unknownChanges = Repository has changed but Bamboo is unable to extract changes between revision {0} and {1}.
repository.git.messages.missingRepositoryUrl = Please specify Repository URL.
repository.git.messages.unsupportedHttpAuthenticationType = Authentication type not supported for http(s) protocol.
repository.git.messages.unsupportedSshAuthenticationType = ssh authentication type not supported.
repository.git.messages.unsupportedUsernameField = Username field is supported for http(s) and SSH protocol only.
repository.git.messages.duplicateUsernameField = Duplicate username.
repository.git.messages.duplicatePasswordField = Duplicate password.
repository.git.messages.cannotFindPom = Cannot find pom file in the specified location ''{0}''.
repository.git.messages.invalidPomPath = Path to POM file cannot contain ''..'' sequence.
repository.git.messages.pushFailed = Pushing revision {0} has failed.

repository.git.messages.branchIntegration.shallowClonesWillBeDisabled = Shallow clones will be disabled when performing branch integration.

git.fields = Git
git.fields.title = Help on Git configuration options

repository.github.username = Username
repository.github.username.description = The GitHub user required to access the repositories.
repository.github.password = Password
repository.github.password.description = The password required by the GitHub username.
repository.github.repository = Repository
agent.capability.type.system.executable.ssh.valuerepository.github.repository.description = Select the repository you want to use for your Plan.
repository.github.branch = Branch
repository.github.branch.description = Choose a branch you want to check out your code from.
repository.github.loadRepositories = Load Repositories
repository.github.loadingRepositories = Loading Repositories
repository.github.useShallowClones = Use shallow clones
repository.github.useShallowClones.description = Fetches the shallowest commit history possible. Do not use if your build depends on full repository history.
repository.github.useSubmodules = Use submodules
repository.github.useSubmodules.description = Enable submodules support if defined for repository. If native Git capability is not defined for agent submodules support would be disabled.
repository.github.commandTimeout = Command timeout (minutes)
repository.github.commandTimeout.description = Specifies how many minutes are given for git commands to finish. Default is 180 (3 hours).
repository.github.verbose.logs = Verbose logs
repository.github.verbose.logs.description = Outputs more verbose logs from git commands.

repository.github.ajaxError = Failed to load repositories from GitHub.
repository.github.error.emptyUsername = Username cannot be blank.
repository.github.error.invalidUsername = Invalid username.
repository.github.error.noRepositories = No repositories found for user {0}.
repository.github.error.missingRepository = Please select a repository.
repository.github.error.notAuthorized = Not authorized.

system.git.executable = Git

agent.capability.type.system.git.executable.title = Git
agent.capability.type.system.git.executable.key = Executable
agent.capability.type.system.git.executable.key.description =
agent.capability.type.system.git.executable.value = Path
agent.capability.type.system.git.executable.value.description =

agent.capability.type.system.git.executable.type = Git
agent.capability.type.system.git.executable.description = The path to the Git executable (e.g. <b>''C:\\Program Files (x86)\\Git\\git.exe''</b> or <b>''/usr/local/git/bin/git''</b>)

agent.capability.type.system.git.executable.ssh.type = SSH
agent.capability.type.system.git.executable.ssh.description = The path to the SSH executable (e.g <b>''{0}''</b>)

agent.capability.type.git.error.undefinedExecutableKind = Please select a valid executable kind
agent.capability.type.git.error.undefinedExecutable = The Git executable has not been defined


